{"version":3,"sources":["logo.svg","HomePage/Navbar.js","HomePage/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","styled","div","Navbar","Style","BetContainer","BetButton","Homepage","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,smBCI3C,IAAMC,EAAYC,IAAOC,IAAV,KA6BA,SAASC,IAEpB,OACI,oCACI,kBAACH,EAAD,KACA,wBAAII,MAAM,sBAAV,oBAEA,4BACI,wCACA,wCACA,mCACA,2C,+mCCtChB,IAAMJ,EAAYC,IAAOC,IAAV,KAkBTG,EAAeJ,IAAOC,IAAV,KAyBZI,EAAYL,IAAOC,IAAV,KA4BA,SAASK,IAEpB,OACI,oCACA,kBAAC,EAAD,KACI,4BACI,kDACA,yCACA,wBAAIH,MAAM,qBAAV,cAGJ,4BACI,2CAEA,kBAACC,EAAD,KACI,sCAGJ,kBAACA,EAAD,KACI,wCAIR,4BACI,6CAEA,kBAACA,EAAD,KACI,wCAGJ,kBAACA,EAAD,KACI,yCAIR,kBAACC,EAAD,oBC5FGE,MAbf,WACE,OACE,oCACA,kBAAC,EAAD,MACA,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,UCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aff774eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport styled from \"styled-components\";\n\n\nconst Container = styled.div`\n\n    background-color: black;\n    color: white;\n\n    height: 55px;\n    width: 100%;\n\n    border-bottom: 1px solid white;\n    border-top: 1px solid black;\n\n    ul{\n        list-style-type: none;\n        margin-left: 800px;\n        margin-top: -40px;\n    }\n\n    li {\n        float: left;\n        padding-left: 42px;\n    }\n\n    li:hover{\n        color: red;\n        cursor: pointer;\n    }\n\n`\n\nexport default function Navbar() {\n\n    return (\n        <>\n            <Container> \n            <h2 Style=\"margin-left: 30px;\"> Sports Betting </h2>\n\n            <ul>\n                <li>FootBall</li>\n                <li>Baseball</li>\n                <li>MMA</li>\n                <li>E-Sports</li>\n            </ul>\n            </Container>      \n        </>\n    )\n\n}","import React from 'react'\nimport styled from \"styled-components\";\n\nimport NavBar from './Navbar'\n\n\nconst Container = styled.div`\n\n    border: 2px solid white;\n    border-radius: 10px;\n\n    ul{\n        list-style-type: none;\n        float: left;\n\n        margin-right: 40px;\n        margin-top: 8px;\n    }\n\n    li {\n        padding-top: 20px;\n    }\n`\n\nconst BetContainer = styled.div`\n\n    border: 2px solid white;\n    border-radius: 5px;\n\n    opacity: 0.5;\n\n    background-color: grey;\n\n    text-align: center;\n\n    margin-top: 10px;\n\n    li {\n        margin-top: -10px;\n        padding-bottom: 10px;\n    }\n\n    &:hover {\n        color: white;\n        opacity: 1;\n    }\n\n`\n\nconst BetButton = styled.div`\n\n    border: 2px solid white;\n    border-radius: 5px;\n\n    opacity: 0.5;\n\n    height: 20px;\n    width: 180px;\n\n    display: inline-block;\n    background-color: green;\n\n    text-align: center;\n\n    margin-right: 20px;\n\n    margin-top: 123px;\n    padding-top: 10px;\n    padding-bottom: 14px;\n\n    &:hover {\n        color: white;\n        opacity: 1;\n    }\n\n`\n\nexport default function Homepage() {\n\n    return (\n        <>\n        <Container>\n            <ul>\n                <li>Browns vs Stealers</li>\n                <li>Team One:</li>\n                <li Style=\"margin-top: 10px;\">Team Two:</li>\n            </ul>\n\n            <ul>\n                <li>Money Line </li>\n\n                <BetContainer>\n                    <li> +130</li>\n                </BetContainer>\n\n                <BetContainer>\n                    <li> -120 </li>\n                </BetContainer>\n            </ul>\n\n            <ul>\n                <li>Over / Under </li>\n\n                <BetContainer>\n                    <li>+7 +140</li>\n                </BetContainer>\n\n                <BetContainer>\n                    <li>-7 -120</li>\n                </BetContainer>\n            </ul>\n\n            <BetButton>\n                Place Bet\n            </BetButton>\n        </Container>\n        </>\n    )\n\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport HomePage from './HomePage/index'\nimport NavBar from './HomePage/Navbar'\n\nfunction App() {\n  return (\n    <>\n    <NavBar />\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <HomePage />\n      </header>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}